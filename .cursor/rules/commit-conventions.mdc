---
description: Commit Message Conventions
globs:
alwaysApply: true
---

When making commits, ALWAYS follow the conventional commit format with project-specific rules:

### Commit Format
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Required Commit Types
- `feat` - New feature
- `fix` - Bug fix
- `docs` - Documentation changes
- `style` - Code formatting (no logic changes)
- `refactor` - Code refactoring (no new features or bug fixes)
- `perf` - Performance improvements
- `test` - Adding or updating tests
- `build` - Build system or external dependencies
- `ci` - CI/CD configuration changes
- `chore` - Maintenance tasks
- `revert` - Reverting previous commits

### Required Commit Scopes
- `setup` - Initial project setup
- `config` - Configuration files
- `deps` - Dependencies
- `ui` - User interface components
- `api` - API/backend logic
- `auth` - Authentication system
- `db` - Database related changes
- `docs` - Documentation
- `test` - Testing
- `build` - Build/compilation
- `ci` - Continuous integration
- `release` - Release/version management

### Commit Rules
1. **Type and scope are REQUIRED** - Every commit must have both
2. **Lowercase only** - Type and scope must be lowercase
3. **Description rules**:
   - Must be lowercase (no sentence case, start case, pascal case, or upper case)
   - Cannot be empty
   - No period at the end
   - Use imperative mood ("add feature" not "added feature")
   - Keep concise but descriptive

### Valid Examples
```bash
feat(auth): add google oauth integration
fix(ui): resolve button alignment issue
docs(api): update authentication endpoints
refactor(db): optimize user queries
test(auth): add login validation tests
chore(config): update eslint rules
```

### Invalid Examples (DO NOT USE)
```bash
# ❌ Missing scope
feat: add new feature

# ❌ Invalid type
feature(auth): add oauth

# ❌ Invalid scope
feat(frontend): add component

# ❌ Wrong case
Feat(auth): Add OAuth Integration

# ❌ Sentence case
feat(auth): Add google oauth integration.

# ❌ Empty description
feat(auth):

# ❌ Period at end
feat(auth): add google oauth integration.
```

### Breaking Changes
When introducing breaking changes, use the footer:
```bash
feat(api): redesign user authentication

BREAKING CHANGE: The authentication API has been completely redesigned.
Old authentication methods are no longer supported.
```

### Issue References
Reference issues in the footer:
```bash
fix(auth): resolve token expiration bug

Closes #123
Fixes #456
```

## Code Quality Standards

### TypeScript
- Use TypeScript for all code
- Prefer interfaces over types
- Use descriptive variable names with auxiliary verbs (isLoading, hasError)
- Use functional, declarative programming
- Avoid classes unless absolutely necessary

### React/Next.js
- Use functional components
- Minimize 'use client' usage
- Favor React Server Components (RSC)
- Use Shadcn UI, Radix, and Tailwind CSS
- Implement responsive design with mobile-first approach

### Error Handling
- Handle errors and edge cases at the beginning of functions
- Use early returns for error conditions
- Place the happy path last in functions
- Avoid unnecessary else statements
- Use guard clauses for preconditions

### File Structure
- Use lowercase with dashes for directories
- Favor named exports for components
- Place static content and interfaces at file end
- Use content variables for static content outside render functions

## Project-Specific Guidelines

### Authentication
- Use Supabase Auth for user authentication
- Implement Row Level Security (RLS) policies
- Handle authentication errors gracefully

### Database
- Use Supabase for database interactions
- Optimize GraphQL queries to fetch only necessary data
- Implement proper authentication and authorization

### UI Components
- Use Shadcn UI components as base
- Follow the established design system
- Implement proper accessibility features
- Use Tailwind CSS for styling

### Testing
- Implement unit tests for utility functions
- Use integration tests for complex components
- Test critical user flows end-to-end

## When Making Commits

1. **Always validate** your commit message follows the format: `<type>(<scope>): <description>`
2. **Check scope** is one of the predefined scopes
3. **Ensure description** is lowercase and descriptive
4. **Add body** if the change needs explanation
5. **Reference issues** if applicable
6. **Mark breaking changes** if any

## References
- See `docs/COMMIT_CONVENTIONS.md` for complete documentation
- Follow the project's coding standards and conventions
- Maintain consistency with existing codebase patterns
